<UserControl x:Class="GameDeckWpf.View.GameDeckMasterDetail"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:local="clr-namespace:GameDeckWpf.View" 
             xmlns:viewmodel="clr-namespace:GameDeckWpf.ViewModel" 
             d:DataContext="{d:DesignInstance Type=viewmodel:GameDeckMasterDetailVM}"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
             Background="White">

    <Border BorderThickness="0,1,0,0">
        <DockPanel>
            <Border DockPanel.Dock="Bottom" BorderThickness="0,1,0,0" BorderBrush="DimGray">
                <StackPanel Orientation="Horizontal" Margin="10" HorizontalAlignment="Right">
                    <StackPanel.Resources>
                        <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderThickness" Value="0"/>
                        </Style>
                        <Style TargetType="Border" BasedOn="{StaticResource {x:Type Border}}">
                            <Setter Property="Margin" Value="2"/>
                            <Setter Property="Background" Value="LightGray"/>
                        </Style>
                    </StackPanel.Resources>
                    <Border Visibility="{Binding IsReadOnly, Converter={StaticResource boolToVisibility}, UpdateSourceTrigger=PropertyChanged}">
                        <Button Command="{Binding BtnModifier_CMD}">
                            Modifier
                        </Button>
                    </Border>
                    <Border Visibility="{Binding IsReadOnly, Converter={StaticResource boolToVisibility}, UpdateSourceTrigger=PropertyChanged}">
                        <Button Command="{Binding BtnAjouter_CMD}">
                            Ajouter
                        </Button>
                    </Border>
                    <Border Visibility="{Binding IsReadOnly, Converter={StaticResource boolToVisibilityRevert}, UpdateSourceTrigger=PropertyChanged}">
                        <Button Command="{Binding BtnEnregistrer_CMD}">
                            Enregistrer
                        </Button>
                    </Border>
                    <Border Visibility="{Binding IsReadOnly, Converter={StaticResource boolToVisibilityRevert}, UpdateSourceTrigger=PropertyChanged}">
                        <Button Command="{Binding BtnAnnuler_CMD}">
                            Annuler
                        </Button>
                    </Border>
                    <Border Visibility="{Binding IsReadOnly, Converter={StaticResource boolToVisibility}, UpdateSourceTrigger=PropertyChanged}">
                        <Button Command="{Binding BtnSupprimer_CMD}">
                            Supprimer
                        </Button>
                    </Border>
                </StackPanel>
            </Border>

            <Border DockPanel.Dock="Left" BorderThickness="0,0,1,0" BorderBrush="DimGray">
                <StackPanel VerticalAlignment="Stretch" DockPanel.Dock="Left" MinWidth="150">
                    <Label HorizontalAlignment="Left" Content="Catégorie"/>
                    <WrapPanel Orientation="Horizontal">
                        <Border BorderThickness="1,1,0,1" CornerRadius="1,0,0,1" BorderBrush="LightSlateGray" Background="LightGray">
                            <ComboBox Name="CmbCategorie" BorderThickness="0" Background="Transparent" DisplayMemberPath="Nom" StaysOpenOnEdit="True" IsEditable="True"
                                  MinWidth="130"
                              IsEnabled="{Binding IsReadOnly, UpdateSourceTrigger=PropertyChanged}" 
                              ItemsSource="{Binding GenresList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="SelectionChanged">
                                        <i:InvokeCommandAction Command="{Binding Cmb_CategorieItemChangedCMD}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=SelectedItem, UpdateSourceTrigger=PropertyChanged}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </ComboBox>
                        </Border>
                        <Border BorderThickness="0,1,1,1" CornerRadius="0,1,1,0" BorderBrush="LightSlateGray">
                            <Button Background="Transparent" BorderThickness="0" MinWidth="20" VerticalContentAlignment="Center"
                                    HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" FontWeight="Bold" FontFamily="console" Content="X">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="SelectionChanged">
                                        <i:InvokeCommandAction Command="{Binding Btn_Categorie}" CommandParameter="{Binding ElementName=CmbCategorie}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </Button>
                        </Border>
                    </WrapPanel>
                    <ListView VerticalAlignment="Stretch" IsEnabled="{Binding IsReadOnly, UpdateSourceTrigger=PropertyChanged}"
                      SelectedItem="{Binding CurrentGame, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                      ItemsSource="{Binding GamesList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <ListView.ItemContainerStyle>
                            <Style TargetType="ListViewItem">
                                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                <Setter Property="BorderThickness" Value="0,0,0,1"/>
                                <Setter Property="BorderBrush" Value="DimGray"/>
                                <Setter Property="Margin" Value="0,0,0,1"/>
                            </Style>
                        </ListView.ItemContainerStyle>
                        <ListView.ItemTemplate>
                            <DataTemplate>
                                <StackPanel>
                                    <TextBlock FontWeight="Bold" Text="{Binding Nom}"/>
                                    <TextBlock FontSize="10" Text="{Binding Editeur.Nom}"/>
                                </StackPanel>
                            </DataTemplate>
                        </ListView.ItemTemplate>
                    </ListView>
                </StackPanel>
            </Border>

            <ScrollViewer DockPanel.Dock="Right" VerticalScrollBarVisibility="Auto">
                <ScrollViewer.Resources>
                    <Style TargetType="Label">
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                        <Setter Property="HorizontalContentAlignment" Value="Right"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Setter Property="Width" Value="100"/>
                        <Setter Property="FontWeight" Value="Bold"/>
                    </Style>
                    <!--<Style TargetType="Label">
                    <Setter Property="FontWeight" Value="Bold"/>
                </Style>-->
                    <Style TargetType="TextBox">
                        <Setter Property="Width" Value="125"/>
                        <Setter Property="Height" Value="25"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Style.Triggers>
                            <!--<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TextBox}, Path=IsReadOnly}" Value="true">-->
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsReadOnly}" Value="true">
                                <Setter Property="BorderThickness" Value="0"/>
                                <Setter Property="Background" Value="{x:Null}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                    <Style TargetType="ComboBox">
                        <Setter Property="Width" Value="125"/>
                        <Setter Property="Height" Value="25"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                    </Style>
                    <!--<Style TargetType="DatePicker">
                        <Setter Property="Width" Value="125"/>
                        <Setter Property="Height" Value="25"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                    </Style>-->
                </ScrollViewer.Resources>

                <StackPanel Margin="15,5">
                    <StackPanel VerticalAlignment="Top"
                         HorizontalAlignment="Left">
                        <StackPanel.Resources>
                            <Style TargetType="WrapPanel">
                                <Setter Property="Orientation" Value="Horizontal"/>
                            </Style>
                        </StackPanel.Resources>

                        <WrapPanel>
                            <Label Grid.Column="0"
                           Content="Nom"/>
                            <TextBox Grid.Column="1"
                             Text="{Binding CurrentGame.Nom, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                             IsReadOnly="{Binding IsReadOnly, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        </WrapPanel>

                        <WrapPanel>
                            <Label Grid.Column="0"
                               Content="Editeur"/>
                            <StackPanel VerticalAlignment="Center">
                                <ComboBox DisplayMemberPath="Nom" Grid.Column="1" StaysOpenOnEdit="True" IsEditable="True" 
                                      Visibility="{Binding IsReadOnly, Converter={StaticResource boolToVisibilityRevert}, UpdateSourceTrigger=PropertyChanged}" 
                                      SelectedValue="{Binding Path=CurrentGame.EditeurId, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" SelectedValuePath="Id"
                                      SelectedItem="{Binding Path=CurrentGame.Editeur, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                      ItemsSource="{Binding EditeursList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                <TextBox Grid.Column="1" 
                                     Text="{Binding CurrentGame.Editeur.Nom, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                     Visibility="{Binding IsReadOnly, Converter={StaticResource boolToVisibility}, UpdateSourceTrigger=PropertyChanged}" IsReadOnly="True"/>
                            </StackPanel>
                        </WrapPanel>

                        <WrapPanel>
                            <Label Grid.Column="0"
                               Content="Genre"/>
                            <StackPanel VerticalAlignment="Center">
                                <ComboBox DisplayMemberPath="Nom" Grid.Column="1" StaysOpenOnEdit="True" IsEditable="True" 
                                      Visibility="{Binding IsReadOnly, Converter={StaticResource boolToVisibilityRevert}, UpdateSourceTrigger=PropertyChanged}" 
                                      SelectedValue="{Binding Path=CurrentGame.GenreId, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" SelectedValuePath="Id"
                                      SelectedItem="{Binding Path=CurrentGame.Genre, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                      ItemsSource="{Binding GenresList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                <TextBox Grid.Column="1" 
                                     Text="{Binding CurrentGame.Genre.Nom, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                     Visibility="{Binding IsReadOnly, Converter={StaticResource boolToVisibility}, UpdateSourceTrigger=PropertyChanged}" IsReadOnly="True"/>
                            </StackPanel>
                        </WrapPanel>

                        <WrapPanel>
                            <Label Grid.Column="0" 
                                   Content="Date de sortie"/>
                            <StackPanel>
                                <!--<DatePicker Grid.Column="1" 
                                            Text="{Binding RelativeSource={RelativeSource Self}, Path=SelectedDate, Mode=OneWayToSource, UpdateSourceTrigger=LostFocus}"
                                            SelectedDate="{Binding CurrentGame.DateSortie, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                            Visibility="{Binding IsReadOnly, Converter={StaticResource boolToVisibilityRevert}, UpdateSourceTrigger=PropertyChanged}">-->
                                <!--<DatePicker Grid.Column="1" 
                                            SelectedDate="{Binding CurrentGame.DateSortie, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                            Visibility="{Binding IsReadOnly, Converter={StaticResource boolToVisibilityRevert}, UpdateSourceTrigger=PropertyChanged}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="SelectedDateChanged">
                                            <i:InvokeCommandAction Command="{Binding Dp_DateSortieLostFocusCMD}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DatePicker}, Path=Text}"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </DatePicker>
                                <TextBox Grid.Column="1"  IsReadOnly="True"
                                     Text="{Binding CurrentGame.DateSortie, UpdateSourceTrigger=PropertyChanged, Mode=OneWay, ConverterCulture=fr-FR, StringFormat=d}"
                                     Visibility="{Binding IsReadOnly, Converter={StaticResource boolToVisibility}, UpdateSourceTrigger=PropertyChanged}"/>-->
                                <TextBox Grid.Column="1" IsReadOnly="{Binding IsReadOnly, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}" 
                                         Text="{Binding CurrentGame.DateSortie, UpdateSourceTrigger=LostFocus, Mode=TwoWay, ConverterCulture=fr-FR, StringFormat=d}">
                                    <!--<i:Interaction.Triggers>
                                        <i:EventTrigger EventName="LostFocus">
                                            <i:InvokeCommandAction Command="{Binding Dp_DateSortieLostFocusCMD}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TextBox}, Path=Text}"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>-->
                                </TextBox>
                            </StackPanel>

                        </WrapPanel>

                    </StackPanel>

                    <Label Grid.Row="0"
                       Content="Description"/>
                    <Border>
                        <TextBox MinHeight="50" Width="auto"
                         VerticalContentAlignment="Top" BorderThickness="0" Background="Transparent"
                         Text="{Binding CurrentGame.Description, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                         IsReadOnly="{Binding IsReadOnly, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    </Border>


                    <StackPanel Margin="0,10,0,0" Visibility="{Binding IsReadOnly, Converter={StaticResource boolToVisibility}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                        <DockPanel>
                            <Label DockPanel.Dock="Right" Content="{Binding AverageNote, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <Label DockPanel.Dock="Left" Content="Evaluations"/>
                        </DockPanel>

                        <Border MinHeight="175">
                            <Grid Background="Transparent">
                                <ListView Name="lv_Evaluations" VerticalAlignment="Stretch" 
                                      Visibility="{Binding RelativeSource={RelativeSource Mode=Self}, Path=HasItems, Converter={StaticResource boolToVisibility}, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                      IsEnabled="{Binding IsReadOnly, UpdateSourceTrigger=PropertyChanged}"
                                      ItemsSource="{Binding CurrentGame.Evaluations, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                    <ListView.ItemContainerStyle>
                                        <Style TargetType="ListViewItem">
                                            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                            <Setter Property="BorderThickness" Value="0,0,0,1"/>
                                            <Setter Property="BorderBrush" Value="DimGray"/>
                                            <Setter Property="Margin" Value="0,0,0,1"/>
                                        </Style>
                                    </ListView.ItemContainerStyle>
                                    <ListView.ItemTemplate>
                                        <DataTemplate>
                                            <DockPanel>
                                                <TextBlock DockPanel.Dock="Right" FontWeight="Bold" Text="{Binding Note}"/>
                                                <StackPanel DockPanel.Dock="Left">
                                                    <TextBlock FontWeight="Bold" Text="{Binding NomEvaluateur}"/>
                                                    <TextBlock FontSize="10" Text="{Binding Editeur.Date}"/>
                                                </StackPanel>
                                            </DockPanel>
                                        </DataTemplate>
                                    </ListView.ItemTemplate>
                                </ListView>
                                <Grid 
                                Visibility="{Binding ElementName=lv_Evaluations, Converter={StaticResource boolToVisibilityRevert}, Path=HasItems, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                >
                                    <Label Content="Il n'y a rien à voir ici..." MinWidth="300" FontSize="25"
                                       HorizontalAlignment="Stretch" VerticalAlignment="Top"
                                       HorizontalContentAlignment="Center" Margin="10">
                                        <Label.Foreground>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                                <GradientStop Color="Yellow" Offset="0.0" />
                                                <GradientStop Color="Red" Offset="0.25" />
                                                <GradientStop Color="Blue" Offset="0.75" />
                                                <GradientStop Color="LimeGreen" Offset="1.0" />
                                            </LinearGradientBrush>
                                        </Label.Foreground>
                                    </Label>
                                    <Image Source="/Image/david_goodenough.png"/>
                                </Grid>
                            </Grid>
                        </Border>
                    </StackPanel>

                </StackPanel>

            </ScrollViewer>
        </DockPanel>
    </Border>
</UserControl>
